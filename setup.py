import os
import sys
import subprocess
import platform


def install_requirements():
    """Installe les d√©pendances requises"""
    print("üîß Installation des d√©pendances...")

    requirements = [
        "customtkinter==5.2.2",
        "yt-dlp==2024.1.7",
        "Pillow==10.2.0",
        "requests==2.31.0",
        "urllib3==2.1.0"
    ]

    for requirement in requirements:
        try:
            print(f"üì¶ Installation de {requirement}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", requirement])
            print(f"‚úÖ {requirement} install√© avec succ√®s")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de l'installation de {requirement}: {e}")
            return False

    print("‚úÖ Toutes les d√©pendances ont √©t√© install√©es avec succ√®s!")
    return True


def check_python_version():
    """V√©rifie que la version de Python est compatible"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8 ou sup√©rieur est requis")
        print(f"Version actuelle: {version.major}.{version.minor}.{version.micro}")
        return False

    print(f"‚úÖ Version Python compatible: {version.major}.{version.minor}.{version.micro}")
    return True


def create_directories():
    """Cr√©e les dossiers n√©cessaires"""
    print("üìÅ Cr√©ation des dossiers...")

    directories = [
        "telechargements",
        "temp"
    ]

    for directory in directories:
        try:
            os.makedirs(directory, exist_ok=True)
            print(f"‚úÖ Dossier '{directory}' cr√©√©")
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation du dossier '{directory}': {e}")
            return False

    return True


def check_ffmpeg():
    """V√©rifie et installe FFmpeg si n√©cessaire"""
    print("üé¨ V√©rification de FFmpeg...")

    try:
        subprocess.run(['ffmpeg', '-version'],
                       capture_output=True, check=True, timeout=5)
        print("‚úÖ FFmpeg est disponible")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError, subprocess.TimeoutExpired):
        print("‚ö†Ô∏è  FFmpeg n'est pas install√©")
        print("üîß Installation automatique de FFmpeg...")

        system = platform.system().lower()

        if system == "windows":
            print("Windows d√©tect√© - Installation via winget...")
            try:
                subprocess.run(['winget', 'install', 'ffmpeg'], check=True)
                print("‚úÖ FFmpeg install√© via winget")
                return True
            except:
                print("‚ùå √âchec de l'installation automatique")
                print("üìù Veuillez installer FFmpeg manuellement:")
                print("   1. T√©l√©chargez FFmpeg depuis https://ffmpeg.org/download.html")
                print("   2. Ajoutez FFmpeg au PATH syst√®me")
                return False

        elif system == "darwin":  # macOS
            print("macOS d√©tect√© - Installation via Homebrew...")
            try:
                subprocess.run(['brew', 'install', 'ffmpeg'], check=True)
                print("‚úÖ FFmpeg install√© via Homebrew")
                return True
            except:
                print("‚ùå √âchec de l'installation automatique")
                print("üìù Veuillez installer FFmpeg manuellement:")
                print("   brew install ffmpeg")
                return False

        else:  # Linux
            print("Linux d√©tect√© - Installation via gestionnaire de paquets...")
            try:
                # Essayer apt (Ubuntu/Debian)
                subprocess.run(['sudo', 'apt', 'update'], check=True)
                subprocess.run(['sudo', 'apt', 'install', '-y', 'ffmpeg'], check=True)
                print("‚úÖ FFmpeg install√© via apt")
                return True
            except:
                try:
                    # Essayer yum (CentOS/RHEL)
                    subprocess.run(['sudo', 'yum', 'install', '-y', 'ffmpeg'], check=True)
                    print("‚úÖ FFmpeg install√© via yum")
                    return True
                except:
                    try:
                        # Essayer pacman (Arch)
                        subprocess.run(['sudo', 'pacman', '-S', '--noconfirm', 'ffmpeg'], check=True)
                        print("‚úÖ FFmpeg install√© via pacman")
                        return True
                    except:
                        print("‚ùå √âchec de l'installation automatique")
                        print("üìù Veuillez installer FFmpeg manuellement:")
                        print("   sudo apt install ffmpeg  # Ubuntu/Debian")
                        print("   sudo yum install ffmpeg  # CentOS/RHEL")
                        print("   sudo pacman -S ffmpeg   # Arch Linux")
                        return False


def main():
    """Fonction principale de configuration"""
    print("üöÄ Configuration de YouTube Downloader Pro")
    print("=" * 50)

    # V√©rifier la version Python
    if not check_python_version():
        input("Appuyez sur Entr√©e pour quitter...")
        return

    # Cr√©er les dossiers
    if not create_directories():
        print("‚ùå Erreur lors de la cr√©ation des dossiers")
        input("Appuyez sur Entr√©e pour quitter...")
        return

    # Installer les d√©pendances
    if not install_requirements():
        print("‚ùå Erreur lors de l'installation des d√©pendances")
        input("Appuyez sur Entr√©e pour quitter...")
        return

    # V√©rifier FFmpeg
    ffmpeg_ok = check_ffmpeg()
    if not ffmpeg_ok:
        print("‚ö†Ô∏è  L'application fonctionnera mais sans conversion audio")

    print("\n" + "=" * 50)
    print("üéâ Configuration termin√©e avec succ√®s!")
    print("‚ñ∂Ô∏è  Vous pouvez maintenant lancer l'application avec start.py")

    if not ffmpeg_ok:
        print("‚ö†Ô∏è  Note: FFmpeg n'est pas install√© - certaines fonctionnalit√©s seront limit√©es")

    input("\nAppuyez sur Entr√©e pour continuer...")


if __name__ == "__main__":
    main()